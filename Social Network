
ERROR_DUPLICATE_USER = 0
ERROR_FAILED_AUTHENTICATION = 1
ERROR_FRIEND_ALREADY_FOUND = 2
ERROR_FRIEND_NOT_FOUND = 3
ERROR_USER_NOT_FOUND = 4
ERROR_MESSAGE = {ERROR_DUPLICATE_USER: "ERROR: found duplicate user.", 
                ERROR_FAILED_AUTHENTICATION: "ERROR: authentication failed.", 
                ERROR_FRIEND_ALREADY_FOUND: "ERROR: friendship already exists.", 
                ERROR_FRIEND_NOT_FOUND: "ERROR: friendship does not exist.", 
                ERROR_USER_NOT_FOUND: "ERROR: user does not exist in the social network."}
    

def error_to_string(error_code: int) -> str:
    """
        Provides a descriptive error message

        Args:
            error_code (int): error code generated by a function
        
        Returns:
            (str) Explanation of the error code
    """
    if error_code in ERROR_MESSAGE:
        return ERROR_MESSAGE[error_code]
    else:
        return "INVALID ERROR CODE"



################################################################################

#- YOUR CODE STARTS HERE  (TODO) 

import random
def generate_key() -> int:
    """
    Generates a random key for encryption.

    Returns:
    int: A random integer between 1 and 26.
    """
    random.seed(131)
    final = random.randint(1,26)
    return final

def encrypt_password(password: str) -> str:
    """
    Encrypts a password using a Caesar cipher.

    Args:
    password (str): The password to encrypt.

    Returns:
    str: The encrypted password.
    """
    ORD_INCREASE = generate_key()
    encrypt_password = ''
    for char in password:
        new_ord = ord(char) + ORD_INCREASE
        if 33 <= new_ord <= 126:
            encrypt_password += chr(new_ord)
        elif new_ord > 126:
            new_ord = new_ord - 94
            encrypt_password += chr(new_ord)
    return encrypt_password

def string_to_user(user_info: str) -> tuple[str, dict]:
    """
    Converts a user information string into a username and user details dictionary.

    Args:
    user_info (str): User information string in the format "username, password, bio, country | friend1, friend2".

    Returns:
    tuple[str, dict]: A tuple containing the username and a dictionary of user details.
    """
    seperate_info = user_info.split(' | ')
    friends_str = seperate_info[1]
    everything_else = seperate_info[0]
    everything_list = everything_else.split(', ')
    friends_list = friends_str.split(',')
    for i in range(len(friends_list)):
        friends_list[i] = friends_list[i].strip()
    username = everything_list[0]
    dict_user = {}
    dict_user['password'] = encrypt_password(everything_list[1])
    dict_user['bio'] = everything_list[2]
    dict_user['country'] = everything_list[3]
    dict_user['friends'] = friends_list
    return (username,dict_user)

def initialize_social_network_from_file(filename: str) -> dict:
    """
    Initializes a social network from a file.

    Args:
    filename (str): Path to the file containing user information.

    Returns:
    dict: A dictionary representing the social network.
    """
    file_network = open(filename, 'r')
    everything = file_network.readlines()
    file_network.close()
    dict_network = {}
    for line in everything:
        tuple_user = string_to_user(line)
        if tuple_user[0] not in dict_network:
            dict_network[tuple_user[0]] = tuple_user[1]
        else:
            return ERROR_DUPLICATE_USER
    return dict_network

def authenticate_user(username_insert: str, password_insert: str, social_network: dict) -> bool:
    """
    Authenticates a user by checking their username and password.

    Args:
    username_insert (str): The username to authenticate.
    password_insert (str): The password to authenticate.
    social_network (dict): The social network dictionary.

    Returns:
    bool: True if authentication is successful, False otherwise.
    """
    if username_insert in social_network:
        password_from_dict = social_network[username_insert]['password']
        encrypt_password_insert = encrypt_password(password_insert)
        if password_from_dict == encrypt_password_insert:
            return True
        else:
            return False
    else:
        return False

def add_friend(username: str, password: str, friend_username: str, social_network: dict) -> None:
    """
    Adds a friend to a user's friend list if authentication is successful.

    Args:
    username (str): The username of the user.
    password (str): The password of the user.
    friend_username (str): The username of the friend to add.
    social_network (dict): The social network dictionary.

    Returns:
    None
    """
    if authenticate_user(username, password, social_network):
        if friend_username in social_network[username]['friends']:
            return ERROR_FRIEND_ALREADY_FOUND
        else:
            if friend_username == username:
                return None
            elif friend_username in social_network:
                social_network[username]['friends'] += [friend_username]
                social_network[friend_username]['friends'] += [username]
            else:
                return ERROR_USER_NOT_FOUND
    else: 
        return ERROR_FAILED_AUTHENTICATION

def get_friend_index(username: str, friend_username: str, social_network: dict) -> int:
    """
    Gets the index of a friend in the user's friend list.

    Args:
    username (str): The username of the user.
    friend_username (str): The username of the friend.
    social_network (dict): The social network dictionary.

    Returns:
    int: The index of the friend, or -1 if not found.
    """
    if friend_username in social_network[username]['friends']:
        for i in range(len(social_network[username]['friends'])):
            if social_network[username]['friends'][i] == friend_username:
                return i 
    else:
        return -1

def remove_friend(username: str, password: str, friend_username: str, social_network: dict) -> None:
    """
    Removes a friend from a user's friend list if authentication is successful.

    Args:
    username (str): The username of the user.
    password (str): The password of the user.
    friend_username (str): The username of the friend to remove.
    social_network (dict): The social network dictionary.

    Returns:
    None
    """
    if authenticate_user(username,password,social_network):
        index_friend = get_friend_index(username,friend_username,social_network)
        if index_friend == -1:
            return ERROR_FRIEND_NOT_FOUND
        else:
            index_user_in_friend = get_friend_index(friend_username, username, social_network)
            del social_network[username]['friends'][index_friend]
            del social_network[friend_username]['friends'][index_user_in_friend]
    else:
        return ERROR_FAILED_AUTHENTICATION


def num_countries_in_friends(username: str, password: str, social_network: dict) -> dict:
    """
    Counts the number of friends from each country in a user's friend list.

    Args:
    username (str): The username of the user.
    password (str): The password of the user.
    social_network (dict): The social network dictionary.

    Returns:
    dict: A dictionary with countries as keys and counts as values.
    """
    if authenticate_user(username,password,social_network):
        friend_list = social_network[username]['friends']
        country_dict = {}
        for friend in friend_list:
            friend_country = social_network[friend]['country']
            if friend_country not in country_dict:
                country_dict[friend_country] = 1
            else:
                country_dict[friend_country] += 1
        return country_dict
    else:
        return ERROR_FAILED_AUTHENTICATION

def swap(lst: list, h: int, k: int) -> None:
    """
    Swaps two elements in a list.

    Args:
    lst (list): The list containing elements to swap.
    h (int): The index of the first element.
    k (int): The index of the second element.

    Returns:
    None
    """
    temp = lst[k]
    lst[k] = lst[h]
    lst[h] = temp

def sort_friend_list(username: str, password: str, social_network: dict) -> None:
    """
    Sorts a user's friend list by the number of common friends.

    Args:
    username (str): The username of the user.
    password (str): The password of the user.
    social_network (dict): The social network dictionary.

    Returns:
    None
    """
    if authenticate_user(username,password,social_network):
        social_network[username]['friends'] = bubble_sort_friends(social_network[username]['friends'],social_network)
    else:
        return ERROR_FAILED_AUTHENTICATION

def common_friend_count(friend_list_1: list, friend_list_2: list) -> int:
    """
    Counts the number of common friends between two friend lists.

    Args:
    friend_list_1 (list): The first friend list.
    friend_list_2 (list): The second friend list.

    Returns:
    int: The number of common friends.
    """
    common_friend_num = 0 
    for friend in friend_list_1:
        if friend in friend_list_2:
            common_friend_num += 1
    return common_friend_num

def bubble_sort_friends(lst: list, social_network: dict) -> list:
    """
    Sorts a list of friends using the bubble sort algorithm based on common friend counts.

    Args:
    lst (list): The list of friends to sort.
    social_network (dict): The social network dictionary.

    Returns:
    list: The sorted list of friends.
    """
    n = len(lst)
    for i in range(n): 
        for j in range(n - 1 - i):  
            if common_friend_count(lst,social_network[lst[j]]['friends']) < common_friend_count(lst,social_network[lst[j+1]]['friends']):  
                swap(lst,j,j+1) 
    return lst

def get_level_friends(username: str, password: str, social_network: dict, level: int) -> list:
    """
    Retrieves friends at a specific level of connection.

    Args:
    username (str): The username of the user.
    password (str): The password of the user.
    social_network (dict): The social network dictionary.
    level (int): The level of connection to retrieve friends from.

    Returns:
    list: A list of friends at the specified level.
    """
    if authenticate_user(username,password,social_network):
        queue = []
        distances = {}
        distances[username] = 0
        queue.append(username)
        while queue != []:
            current_user = queue[0]
            del queue[0]
            for friend in social_network[current_user]['friends']:
                if friend in distances:
                    if distances[friend] > (distances[current_user] + 1):
                        distances[friend] = distances[current_user] + 1
                else:
                    queue.append(friend)
                    distances[friend] = distances[current_user] + 1
        result = []
        for key, value in distances.items():
            if level == value:
                result.append(key)
        return result
    else:
        return ERROR_FAILED_AUTHENTICATION

#- YOUR CODE ENDS HERE 
################################################################################

def social_network_application() -> None:
    """
        Social Network Interface for testing integration from all helper functions only
    """
    user_file_path = input("Enter users file path: ")
    
    # Initialize social network
    social_network = initialize_social_network_from_file(user_file_path)
    if (type(social_network) == int):
        print(error_to_string(social_network))
    
    # Flag to keep track of login status
    user_logged_in = False
    print("Welcome to the CMPSC 131 Social Network!")
    
    # Main loop for user logged in
    while not user_logged_in:
        
        # Login credentials input
        print("Please enter your login credentials:")
        username = input("Username: ")
        password = input("Password: ")
        
        # Authenticate the user.
        user_logged_in = authenticate_user(username, password, social_network)

        if not user_logged_in:
            print("Authentication failed. Incorrect username or password.")
        else:
            print("Login Successful")
            display_menu = True
            
            # Loop for the menu. If user is logged in, they can view the menu infinitely until they log out or exit the program.
            while display_menu:
                print("\n\nPlease select from the menu: ")
                print("1. Add Friend")    
                print("2. Remove Friend")
                print("3. Display Friend List (Sorted)")
                print("4. Display nth Level Friends")
                print("5. Display countries in your network")
                print("6. Log Out")
                print("7. Display menu")
                menu_option = input("Selection: ")


                if menu_option == '1':
                    friend_username = input("Friend Username: ")
                    ret = add_friend(username, password, friend_username, social_network)
                    if ret is None:
                        sort_friend_list(username, password, social_network)
                        print(f"Updated Friend List: {social_network[username]['friends']}")
                    else:
                        print(error_to_string(ret))
                elif menu_option == '2':
                    friend_username = input("Friend Username: ")
                    ret = remove_friend(username, password, friend_username, social_network)
                    if ret is None:
                        sort_friend_list(username, password, social_network)
                        print(f"Updated Friend List: {social_network[username]['friends']}")
                    else:
                        print(error_to_string(ret))
                elif menu_option == '3':
                    sort_friend_list(username, password, social_network)
                    print(f"Updated Friend List: {social_network[username]['friends']}")
                elif menu_option == '4':
                    level = int(input("Enter friendship level (1,2,3, etc.): "))
                    print(f"Your friends at level {level} are {get_level_friends(username, password, social_network, level)}")
                elif menu_option == '5':
                    print(f"Users per country in {username}'s network: \n {num_countries_in_friends(username, password, social_network)}")
                elif menu_option == '6':
                    # Exit display menu loop
                    display_menu = False
                    # Trigger the re-execution of the login loop
                    user_logged_in = False
                elif menu_option == '7':
                    print("Returning to main menu...")
                else:
                    print("Invalid Option. Returning to main menu...")
            
            print("Logging out...")
