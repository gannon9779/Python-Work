class Player:
    """Tracks game statistics for a player.
    
    Attributes:
        name: Player name
        total_games: Count of all games played
        games_won: Count of won games
        games_lost: Count of lost games
        best_game: Best performance (lowest attempts)
        
    >>> p1 = Player('Susy')
    >>> print(p1)
    No game records for Susy
    >>> p1.update_loss()
    >>> p1
    *Game records for Susy*
    Total games: 1
    Games won: 0
    Games lost: 1
    Best game: None
    >>> p3 = Player('Alex')
    >>> p3.update_loss()
    >>> p3.update_loss()
    >>> p3
    *Game records for Alex*
    Total games: 2
    Games won: 0
    Games lost: 2
    Best game: None
    """
    def __init__(self, name):
        """Initialize player with empty game stats"""
        self.name = name 
        self.total_games = 0 
        self.games_won = 0
        self.games_lost = 0 
        self.best_game = None

    def update_win(self, att):
        """Update stats for a won game"""
        self.total_games += 1
        self.games_won += 1 
        if self.best_game == None or att < self.best_game:
            self.best_game = att
    
    def update_loss(self):
        """Update stats for a lost game"""
        self.total_games += 1
        self.games_lost +=1
    

    def __str__(self):
        """Return formatted game statistics"""
        if self.total_games == 0:
            return f'No game records for {self.name}'
        elif self.games_won == 0:
            return f'*Game records for {self.name}*\nTotal games: {self.total_games}\nGames won: {self.games_won}\nGames lost: {self.games_lost}\nBest game: {self.best_game}'
        else:
            return f'*Game records for {self.name}*\nTotal games: {self.total_games}\nGames won: {self.games_won}\nGames lost: {self.games_lost}\nBest game: {self.best_game} attempts'


    __repr__=__str__

class Wordle:
    """Implements Wordle game logic with player tracking.
    
    Attributes:
        player: Associated Player object
        word: Target word to guess
        guess_number: Current guess count
        guess_max: Maximum allowed guesses
        
    >>> w = Wordle(Player('Test'), 'apple')
    >>> w.play('12345')
    'Guess must be all letters'
    >>> w2 = Wordle(Player('Test'), 'hello')
    >>> w2.play('hello')
    'You won the game'
    """

    def __init__(self, player, word):
        """Initialize game with target word and player"""
        self.player = player
        self.word = word.lower()
        self.guess_number = 1
        self.guess_max = 6
        self.game_over = False
    

    def process_guess(self, guess):
        """Generate feedback string for a guess"""
        if len(guess) != 5:
            return 'Guess must be 5 letters long'
        if not guess.isalpha():
            return "Guess must be all letters"
        unknown_word = ['_','_','_','_','_']
        for i in range(len(guess)):
            if guess[i] == self.word[i]: # Exact match
                unknown_word[i] = guess[i].upper()
            elif guess[i] in self.word: # Letter exists elsewhere
                unknown_word[i] = guess[i].lower()
        return ''.join(unknown_word)

    def play(self, guess):
        """Process a game turn with guess validation"""
        guess = guess.lower()
        if self.game_over == True:
            return "Game over"
        elif guess == self.word:
            self.guess_number += 1
            self.game_over = True
            self.player.update_win(self.guess_number-1)
            return "You won the game"
        elif self.guess_number >= self.guess_max:
            self.game_over = True
            self.player.update_loss()
            return f"The word was {self.word}"
        self.guess_number += 1
        return self.process_guess(guess)
